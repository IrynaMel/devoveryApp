{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\naxios.defaults.baseURL = 'localhost:3000/api/products/';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  }\n\n};\nconst register = createAsyncThunk('auth/register', async (credentials, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/signup', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {\n    alert(error);\n  }\n});\nexport const logIn = createAsyncThunk('auth/login', async (credentials, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/login', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {\n    alert('Sorry, your name or email is incorrect! Try again!');\n    return rejectWithValue(error.message);\n  }\n});\nconst logOut = createAsyncThunk('/users/logout', async credentials => {\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n  } catch (error) {\n    alert(error);\n  }\n});\nconst fetchCurrentUser = createAsyncThunk('auth/refresh', async (_, thunkAPI) => {\n  const state = thunkAPI.getState();\n  const persistedToken = state.auth.token;\n\n  if (persistedToken === null) {\n    return thunkAPI.rejectWithValue();\n  }\n\n  token.set(persistedToken);\n\n  try {\n    const {\n      data\n    } = await axios.get('/users/current');\n    return data;\n  } catch (error) {\n    alert(error);\n  }\n});\nconst operations = {\n  register,\n  logIn,\n  logOut,\n  fetchCurrentUser\n};\nexport default operations;","map":{"version":3,"sources":["C:/Users/Irynka/Documents/devoveryApp/client/src/redux/auth/auth-operations.js"],"names":["axios","createAsyncThunk","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","rejectWithValue","data","post","error","alert","logIn","message","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","get","operations"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,8BAAzB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,GAAG,CAACD,KAAD,EAAQ;AACTJ,IAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAASJ,KAAM,EAA9D;AACD,GAHW;;AAIZK,EAAAA,KAAK,GAAG;AACNT,IAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA8C,EAA9C;AACD;;AANW,CAAd;AASA,MAAME,QAAQ,GAAGT,gBAAgB,CAC/B,eAD+B,EAE/B,OAAOU,WAAP,WAA4C;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AAC1C,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAW,eAAX,EAA4BH,WAA5B,CAAvB;AACAP,IAAAA,KAAK,CAACC,GAAN,CAAUQ,IAAI,CAACT,KAAf;AACA,WAAOS,IAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,CAV8B,CAAjC;AAaA,OAAO,MAAME,KAAK,GAAGhB,gBAAgB,CACnC,YADmC,EAEnC,OAAOU,WAAP,YAA4C;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AAC1C,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAW,cAAX,EAA2BH,WAA3B,CAAvB;AACAP,IAAAA,KAAK,CAACC,GAAN,CAAUQ,IAAI,CAACT,KAAf;AACA,WAAOS,IAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,KAAK,CAAC,oDAAD,CAAL;AACA,WAAOJ,eAAe,CAACG,KAAK,CAACG,OAAP,CAAtB;AACD;AACF,CAXkC,CAA9B;AAcP,MAAMC,MAAM,GAAGlB,gBAAgB,CAAC,eAAD,EAAkB,MAAMU,WAAN,IAAqB;AACpE,MAAI;AACF,UAAMX,KAAK,CAACc,IAAN,CAAW,eAAX,CAAN;AACAV,IAAAA,KAAK,CAACK,KAAN;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACdC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,CAP8B,CAA/B;AAQA,MAAMK,gBAAgB,GAAGnB,gBAAgB,CACvC,cADuC,EAEvC,OAAOoB,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAT,EAAd;AAEA,QAAMC,cAAc,GAAGF,KAAK,CAACG,IAAN,CAAWtB,KAAlC;;AAEA,MAAIqB,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAOH,QAAQ,CAACV,eAAT,EAAP;AACD;;AAEDR,EAAAA,KAAK,CAACC,GAAN,CAAUoB,cAAV;;AACA,MAAI;AACF,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAAC2B,GAAN,CAAU,gBAAV,CAAvB;AACA,WAAOd,IAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACdC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,CAlBsC,CAAzC;AAqBA,MAAMa,UAAU,GAAG;AACjBlB,EAAAA,QADiB;AAEjBO,EAAAA,KAFiB;AAGjBE,EAAAA,MAHiB;AAIjBC,EAAAA;AAJiB,CAAnB;AAOA,eAAeQ,UAAf","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'localhost:3000/api/products/';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nconst register = createAsyncThunk(\n  'auth/register',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post('/users/signup', credentials);\n      token.set(data.token);\n      return data;\n    } catch (error) {\n      alert(error);\n    }\n  }\n);\n\nexport const logIn = createAsyncThunk(\n  'auth/login',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post('/users/login', credentials);\n      token.set(data.token);\n      return data;\n    } catch (error) {\n      alert('Sorry, your name or email is incorrect! Try again!');\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst logOut = createAsyncThunk('/users/logout', async credentials => {\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n  } catch (error) {\n    alert(error);\n  }\n});\nconst fetchCurrentUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      return thunkAPI.rejectWithValue();\n    }\n\n    token.set(persistedToken);\n    try {\n      const { data } = await axios.get('/users/current');\n      return data;\n    } catch (error) {\n      alert(error);\n    }\n  }\n);\n\nconst operations = {\n  register,\n  logIn,\n  logOut,\n  fetchCurrentUser,\n};\n\nexport default operations;\n"]},"metadata":{},"sourceType":"module"}